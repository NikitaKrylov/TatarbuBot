version: '3.9'

services:
  frontend:
    build: ./frontend-vite
    expose: [ 3000 ]
    restart: unless-stopped
    init: true
    env_file: [.env]
    ports:
      - 443:443
      - 80:80
    volumes:
      - caddy_data:/data
      - caddy_config:/config

  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    env_file: bot/redis.env
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 2
    ports:
      - 6379:6379

  db:
    container_name: db
    restart: unless-stopped
    image: postgres:latest
    env_file: ./api/db.env
    volumes:
      - ./db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432

  api:
    container_name: api
    restart: unless-stopped
    env_file: ./api/api.env
    build:
      context: ./api
      dockerfile: api.dockerfile
    depends_on:
      - db
    volumes:
      - static:/api/static
    expose: [ 8000 ]

  tg-bot:
    container_name: tg-bot
    restart: unless-stopped
    env_file: bot/bot.env
    command: python3 main.py
    build:
      context: bot
      dockerfile: bot.dockerfile
    depends_on:
      - api
      - redis

  worker:
    container_name: worker
    restart: unless-stopped
    command: celery -A src.workers.app:app worker -l INFO
    build:
      context: bot
      dockerfile: bot.dockerfile
    depends_on:
      - tg-bot

  celery-beat:
    container_name: celery-beat
    restart: unless-stopped
    command: celery -A src.workers.app:app beat -l INFO
    build:
      context: bot
      dockerfile: bot.dockerfile
    depends_on:
      - tg-bot
volumes:
  caddy_data:
  caddy_config:
  static:
