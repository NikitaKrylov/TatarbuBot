import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import CommandStart, Command
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types.menu_button_web_app import MenuButtonWebApp
from aiogram.types.inline_keyboard_button import InlineKeyboardButton
from aiogram.types.inline_keyboard_markup import InlineKeyboardMarkup
from src.shared.config import config
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.repository.api import APIRepository
from src.routes.trains import router as trains_router
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile


bot = Bot(token=config.bot_token)
dp = Dispatcher()
api = APIRepository(config.api_url)

logging.basicConfig(level=logging.INFO)

web_app_main = WebAppInfo(url=config.web_app_base_url)
web_app_reg = WebAppInfo(url=config.reg_route())

start_photo = FSInputFile("static/start_photo.jpg")


@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text='üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å', web_app=web_app_reg),
        ]]
    )
    reply_kb = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text='–ö —É—Ä–æ–∫—É', web_app=web_app_main)
        ]],
        resize_keyboard=True
    )
    existed_user = await api.get_user_by_tg_id(message.from_user.id)
    logging.info(str(existed_user))
    if existed_user:
        return await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or message.from_user.username}, —è —É–∂–µ –∑–Ω–∞—é —Ç–µ–±—è. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ.', reply_markup=reply_kb)

    created_user = await api.create_user({
        'tg_user_id': message.from_user.id,
        'tg_chat_id': message.chat.id,
    })
    logging.info(str(created_user))

    await message.answer_photo(start_photo, f'*–ü—Ä–∏–≤–µ—Ç\\, {message.from_user.first_name or message.from_user.username}\\!* \n–•–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å *–¢–∞—Ç–∞—Ä—Å–∫–∏–π*\\? –ù–∞—à–µ web app –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å —ç—Ç–æ–π –∑–∞—Ç–µ–µ–π\\, —Ç—ã –±—É–¥–µ—à—å –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫ –∏ –ø–æ–ø—É—Ç–Ω–æ –ø–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫—É–ª—å—Ç—É—Ä—É —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω\\. –ê —á—Ç–æ–±—ã –æ–±—É—á–µ–Ω–∏–µ —Ç–µ–±–µ –Ω–µ –Ω–∞—Å–∫—É—á–∏–ª–æ\\, –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ñ–∏—à–∫—É \\- –∏–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–∞–º –∫–∞–∫ –Ω–∞—Ä–æ–¥–Ω—ã—Ö\\, —Ç–∞–∫ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω\\. –ë–µ—Ä–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ —Ä—É–∫–∏ –∏ –±—ã—Å—Ç—Ä–µ–µ –∏–∑—É—á–∞—Ç—å –¢–∞—Ç–∞—Ä—Å–∫–∏–π\\!', parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_kb)
    return await message.answer(f'–ù—É —á—Ç–æ\\, –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é\\? –°–∫–æ—Ä–µ–µ *–∂–º–∏ –∫–Ω–æ–ø–∫—É* üëáüèº\\, –Ω–∞—á–Ω–µ–º c –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é\\.', reply_markup=inline_keyboard, parse_mode=ParseMode.MARKDOWN_V2)


@dp.callback_query(F.data == 'cancel')
async def process_cancel_state(callback: types.CallbackQuery, state: FSMContext):
    if state:
        await state.clear()

    await callback.message.delete()
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    dp.include_router(trains_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
